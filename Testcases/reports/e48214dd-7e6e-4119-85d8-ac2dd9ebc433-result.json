{"name": "test_Order_Placememt_functionality", "status": "broken", "statusDetails": {"message": "configparser.NoOptionError: No option 'device_location_id' in section: 'locators'", "trace": "self = <configparser.ConfigParser object at 0x10b9ca890>, section = 'locators', option = 'device_location_id'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n>           value = d[option]\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/configparser.py:790: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'language_option_xpath': '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widg....d2fo:id/btn_confirm', 'package_name': 'com.digitalgreen.org.d2fo', 'database_name': 'd2fo_loop_digital_green_db'}, {})\nkey = 'device_location_id'\n\n    def __getitem__(self, key):\n        for mapping in self.maps:\n            try:\n                return mapping[key]             # can't use 'key in mapping' with defaultdict\n            except KeyError:\n                pass\n>       return self.__missing__(key)            # support subclasses that define __missing__\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/collections/__init__.py:986: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = ChainMap({}, {'language_option_xpath': '/hierarchy/android.widget.FrameLayout/android.widget.LinearLayout/android.widg....d2fo:id/btn_confirm', 'package_name': 'com.digitalgreen.org.d2fo', 'database_name': 'd2fo_loop_digital_green_db'}, {})\nkey = 'device_location_id'\n\n    def __missing__(self, key):\n>       raise KeyError(key)\nE       KeyError: 'device_location_id'\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/collections/__init__.py:978: KeyError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <Testcases.test_Order_Page.Test_order_page object at 0x10b18fb20>\n\n    def test_Order_Placememt_functionality(self):\n        language_page = Language_page(self.driver)\n        language_page.language_selection_page().user_number_page(Testdata.usernumber, Testdata.OTP_1, Testdata.OTP_2,\n                                                                 Testdata.OTP_3, Testdata.OTP_4, Testdata.OTP_5,\n>                                                                Testdata.OTP_6, ).Order_Placememt()\n\ntest_Order_Page.py:24: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n../Pageobjects/Order_Page.py:45: in Order_Placememt\n    self.do_click(\"DEVICE_LOCATION_ID\")\n../Pageobjects/Basepage.py:30: in do_click\n    self.driver.find_element(MobileBy.ID, configReader.readConfig(\"locators\", locator)).click()\n../Utilities/configReader.py:7: in readConfig\n    return config.get(section, key)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <configparser.ConfigParser object at 0x10b9ca890>, section = 'locators', option = 'device_location_id'\n\n    def get(self, section, option, *, raw=False, vars=None, fallback=_UNSET):\n        \"\"\"Get an option value for a given section.\n    \n        If `vars' is provided, it must be a dictionary. The option is looked up\n        in `vars' (if provided), `section', and in `DEFAULTSECT' in that order.\n        If the key is not found and `fallback' is provided, it is used as\n        a fallback value. `None' can be provided as a `fallback' value.\n    \n        If interpolation is enabled and the optional argument `raw' is False,\n        all interpolations are expanded in the return values.\n    \n        Arguments `raw', `vars', and `fallback' are keyword only.\n    \n        The section DEFAULT is special.\n        \"\"\"\n        try:\n            d = self._unify_values(section, vars)\n        except NoSectionError:\n            if fallback is _UNSET:\n                raise\n            else:\n                return fallback\n        option = self.optionxform(option)\n        try:\n            value = d[option]\n        except KeyError:\n            if fallback is _UNSET:\n>               raise NoOptionError(option, section)\nE               configparser.NoOptionError: No option 'device_location_id' in section: 'locators'\n\n/Library/Frameworks/Python.framework/Versions/3.10/lib/python3.10/configparser.py:793: NoOptionError"}, "attachments": [{"name": "log", "source": "93755a3c-8a78-45c5-aeb6-287bbaf70b25-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "e5cf3b2c-63fa-4ff4-9ba9-f594826a4187-attachment.txt", "type": "text/plain"}], "start": 1725270002174, "stop": 1725270077523, "uuid": "f56c4cc9-1142-40d0-b395-51483a9b16b0", "historyId": "4c1341a7a082958b505c584276b7dbb7", "testCaseId": "83e69db6c525c6927f76291cbcce78b1", "fullName": "test_Order_Page.Test_order_page#test_Order_Placememt_functionality", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('appium_driver')"}, {"name": "suite", "value": "test_Order_Page"}, {"name": "subSuite", "value": "Test_order_page"}, {"name": "host", "value": "Shaiks-MacBook-Pro.local"}, {"name": "thread", "value": "88122-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_Order_Page"}]}